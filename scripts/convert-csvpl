#!/usr/bin/python

import re
import csv
import argparse

args = []

def format_col_names(name):
    return name.strip().lower().replace(" ", "").replace(".", "").replace("#", "number")

def format_row(row):
    row = re.sub('[^A-Za-z0-9 ]+', '', row)
    row = row.lower()
    if " " in row:
        return f'"{row}"'
    return row

def create_file():
    with open(args.file, "r") as csv_f:
        csv_reader = csv.reader(csv_f, delimiter=',')
        line_count = 0
        values = []
        col_names = []
        for row in csv_reader:
            if line_count == 0:
                col_names = [format_col_names(l) for l in row]
                values = [(format_col_names(l), []) for l in row]
                line_count += 1
            else:
                for i in range(len(col_names)):
                    values[i][1].append(format_row(row[i]))
                line_count += 1

        with open(args.output, "a") as fp:
            for i in range(len(values)):
                if values[i][0] != values[args.column][0]:
                    fp.write(f'\n')
                    for j in range(len(values[i][1])):
                        if values[i][1][j]:
                            line = f'{values[i][0]}({values[args.column][1][j]}, {values[i][1][j]}).'
                            fp.write(f'{line}\n')

        print(f'Main column -> {col_names[args.column]}.')
        print(f'There are {len(col_names)} columns')
        print(f'Processed {line_count} lines.')
        print(f'File created with name {args.output}.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", action="store", help="The cvs file to convert to pl.", required=True)
    parser.add_argument("-o", "--output", action="store", default="out.pl", help="Output file if exists will be overiten. Name defaults to out.pl.")
    parser.add_argument("-c", "--column", action="store", default=0, help="Column to use as index defaults to pos 0.", type=int)
    args = parser.parse_args()

    with open(args.output, "w") as f:
        f.write("")

    create_file()
